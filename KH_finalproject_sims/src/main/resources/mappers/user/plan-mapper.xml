<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="plan">

	<!-- api 데이터 -->
	<insert id="insertPlanData" parameterType="map">
		insert into plan_table values(plan_seq.nextval, #{chargeName}
			, (select biz_name from biz where biz_name = #{bizName})
			, (select net_no from network_table where net_name = #{telecomName})
	    	, (select gen_no from tel_gen_table where gen_name = 
	    	<choose>
	    		<when test='telecomGenerationType eq "3G / LTE 모두가능"'>'LTE/3G'</when>
	    		<otherwise>#{telecomGenerationType}</otherwise>
	    	</choose>
	    	)
	    	, #{chargeAmount}, #{voiceAmount}, #{messageAmount}, #{dataAmount}
	    	, #{overVoiceAmtUnit}, #{overMessageAmtUnit}, #{overDataAmtUnit}, sysdate)
	</insert>
	
	<select id="selectPlanList" parameterType="map" resultType="planVo">
		select plan_no, plan_name, biz_name, net_no, gen_no, plan_price, plan_voice, plan_message
		    , plan_data, plan_voice_over, plan_message_over, plan_data_over, plan_date, plan_update_date
		    , (select b.biz_id from biz b where p.biz_name = b.biz_name) as biz_id
		    , (select b.biz_review_star from biz b where p.biz_name = b.biz_name) as biz_review_star
		    , (select count(*) from plan_order po where p.plan_no = po.plan_no and po.order_status=2) as order_count
		from plan_table p
		<if test="searchText != null">
			where plan_name like '%${searchText}%' or biz_name like '%${searchText}%'
		</if>
		<if test="select == 'choose'.toString()">
			order by order_count desc
		</if>
		<if test="select == 'star'.toString()">
			order by biz_review_star desc nulls last
		</if>
		<if test="select == 'data'.toString()">
			order by to_number(plan_data) desc
		</if>
	</select>
	
	<select id="selectPlanFilterList" parameterType="map" resultType="planVo">
		select plan_no, plan_name, biz_name, net_no, gen_no, plan_price, plan_voice, plan_message
		    , plan_data, plan_voice_over, plan_message_over, plan_data_over, plan_date, plan_update_date
		    , (select b.biz_id from biz b where p.biz_name = b.biz_name) as biz_id
		    , (select b.biz_review_star from biz b where p.biz_name = b.biz_name) as biz_review_star
		    , (select count(*) from plan_order po where p.plan_no = po.plan_no and po.order_status=2) as order_count
		from plan_table p
		<trim prefix="where" prefixOverrides="and|or">
			<if test="planData == 100000">plan_data >= 100000</if>
			<if test="planData == 50000"><![CDATA[ (plan_data < 100000 and plan_data >= 50000)]]> </if>
			<if test="planData == 10000"><![CDATA[ (plan_data < 50000 and plan_data >= 10000)]]> </if>
			<if test="planData == 5000"><![CDATA[ (plan_data < 10000 and plan_data >= 5000)]]> </if>
			<if test="planData == 1000"><![CDATA[ plan_data <= 5000]]> </if>
			
			<if test="planVoice == 1"><![CDATA[and plan_voice = 0 ]]> </if>
			<if test="planVoice == 300"><![CDATA[and plan_voice >= 300 ]]> </if>
			<if test="planVoice == 180"><![CDATA[and (plan_voice < 300 and plan_voice >= 180) ]]> </if>
			<if test="planVoice == 60"><![CDATA[and (plan_voice < 180 and plan_voice >= 60) ]]> </if>
			<if test="planVoice == 30"><![CDATA[and plan_voice <= 60 ]]> </if>
			
			<if test="planMessage == 1"><![CDATA[and plan_message = 0 ]]> </if>
			<if test="planMessage == 300"><![CDATA[and plan_message >= 300 ]]> </if>
			<if test="planMessage == 100"><![CDATA[and (plan_message < 300 and plan_message >= 100) ]]> </if>
			<if test="planMessage == 50"><![CDATA[and (plan_message < 100 and plan_message >= 50) ]]> </if>
			<if test="planMessage == 10"><![CDATA[and plan_message <= 50 ]]> </if>
			
			<if test="planPrice == 30000"><![CDATA[and plan_price >= 30000 ]]> </if>
			<if test="planPrice == 20000"><![CDATA[and (plan_price < 30000 and plan_price >= 20000) ]]> </if>
			<if test="planPrice == 10000"><![CDATA[and (plan_price < 20000 and plan_price >= 10000) ]]> </if>
			<if test="planPrice == 5000"><![CDATA[and (plan_price < 10000 and plan_price >= 5000) ]]> </if>
			<if test="planPrice == 1000"><![CDATA[and plan_price <= 5000 ]]> </if>
			
			<if test="netNo != null and netNo != 0"><![CDATA[ and net_no = #{netNo} ]]> </if>
			
			<if test="genNo == 1"><![CDATA[ and gen_no = #{genNo}]]> </if>
			<if test="genNo == 2"><![CDATA[ and (gen_no = #{genNo} or gen_no = 3)]]> </if>
			<if test="genNo == 4"><![CDATA[ and (gen_no = #{genNo} or gen_no = 3)]]> </if>
			
			<if test="bizName != null"><![CDATA[and biz_name = #{bizName} ]]> </if>
			
			<if test="searchText != null">
				and (plan_name like '%${searchText}%' or biz_name like '%${searchText}%')
			</if>
			
			<if test="select == 'choose'.toString()">
			order by order_count desc
			</if>
			<if test="select == 'star'.toString()">
				order by biz_review_star desc nulls last
			</if>
			<if test="select == 'data'.toString()">
				order by to_number(plan_data) desc
			</if>
		</trim>
	</select>
	
	<select id="cntPlanList" parameterType="map" resultType="int">
		select count(*) from plan_table
		<if test="searchText != null">
			where plan_name like '%${searchText}%' or biz_name like '%${searchText}%'
		</if>
	</select>
	
	<select id="cntPlanFilterList" parameterType="map" resultType="int">
		select count(*) from plan_table 
		<trim prefix="where" prefixOverrides="and|or">
			<if test="planData == 100000">plan_data >= 100000</if>
			<if test="planData == 50000"><![CDATA[ (plan_data < 100000 and plan_data >= 50000)]]> </if>
			<if test="planData == 10000"><![CDATA[ (plan_data < 50000 and plan_data >= 10000)]]> </if>
			<if test="planData == 5000"><![CDATA[ (plan_data < 10000 and plan_data >= 5000)]]> </if>
			<if test="planData == 1000"><![CDATA[ plan_data <= 5000]]> </if>
			
			<if test="planVoice == 0"><![CDATA[and plan_voice = 0 ]]> </if>
			<if test="planVoice == 300"><![CDATA[and plan_voice >= 300 ]]> </if>
			<if test="planVoice == 180"><![CDATA[and (plan_voice < 300 and plan_voice >= 180) ]]> </if>
			<if test="planVoice == 60"><![CDATA[and (plan_voice < 180 and plan_voice >= 60) ]]> </if>
			<if test="planVoice == 30"><![CDATA[and plan_voice <= 60 ]]> </if>
			
			<if test="planMessage == 0"><![CDATA[and plan_message = 0 ]]> </if>
			<if test="planMessage == 300"><![CDATA[and plan_message >= 300 ]]> </if>
			<if test="planMessage == 100"><![CDATA[and (plan_message < 300 and plan_message >= 100) ]]> </if>
			<if test="planMessage == 50"><![CDATA[and (plan_message < 100 and plan_message >= 50) ]]> </if>
			<if test="planMessage == 10"><![CDATA[and plan_message <= 50 ]]> </if>
			
			<if test="planPrice == 30000"><![CDATA[and plan_price >= 30000 ]]> </if>
			<if test="planPrice == 20000"><![CDATA[and (plan_price < 30000 and plan_price >= 20000) ]]> </if>
			<if test="planPrice == 10000"><![CDATA[and (plan_price < 20000 and plan_price >= 10000) ]]> </if>
			<if test="planPrice == 5000"><![CDATA[and (plan_price < 10000 and plan_price >= 5000) ]]> </if>
			<if test="planPrice == 1000"><![CDATA[and plan_price <= 5000 ]]> </if>
			
			<if test="netNo != null and netNo != 0"><![CDATA[ and net_no = #{netNo} ]]> </if>
			
			<if test="genNo == 1"><![CDATA[ and gen_no = #{genNo}]]> </if>
			<if test="genNo == 2"><![CDATA[ and (gen_no = #{genNo} or gen_no = 3)]]> </if>
			<if test="genNo == 4"><![CDATA[ and (gen_no = #{genNo} or gen_no = 3)]]> </if>
			
			<if test="bizName != null"><![CDATA[and biz_name = #{bizName} ]]> </if>
			
			<if test="searchText != null">
				and (plan_name like '%${searchText}%' or biz_name like '%${searchText}%')
			</if>
		</trim>
	</select>
	
	<select id="bizNameList" resultType="string">
		select biz_name from biz
	</select>
	
	<select id="selectBizIdList" resultType="bvo">
		select b.biz_id from biz b
		where (select enable from member m where b.biz_id = m.id) = 1
	</select>
	
	<select id="selectUser" parameterType="string" resultType="int">
		select count(*) from custom_q where user_id=#{userId}
	</select>
	
	<insert id="insertUser" parameterType="string">
		insert into custom_q values(#{userId}, null, null, null, null)
	</insert>
	
	<select id="customQue" parameterType="string" resultType="qVo">
		select * from custom_q where user_id=#{userId}
	</select>
	
	<update id="insertQueVal" parameterType="map">
		update custom_q set cq_${type}=#{value}
	</update>

	<!-- 신청서 -->
	<select id="selectOrderNo" resultType="int">
		SELECT plan_order_seq.NEXTVAL FROM dual
	</select>

	<insert id="insertPlanOrder" parameterType="orderVo">
		INSERT INTO plan_order (
			order_no, user_id, biz_id, plan_no, join_category, sim_type, sim_yn
			, current_telecom, plan_bill, plan_pay, order_date, order_status, net_no, gen_no
			, order_price, order_data, order_voice, order_message, order_address
		) VALUES (
			#{orderNo}, #{userId}, #{bizId}, #{planNo}, #{joinCategory}, #{simType}, #{simYn}
			, #{currentTelecom}, #{planBill}, #{planPay}, sysdate, '1', #{netNo}, #{genNo}
			, #{orderPrice}, #{orderData}, #{orderVoice}, #{orderMessage}, #{orderAddress})
	</insert>

	<insert id="insertPayinfoCard" parameterType="kh.finalproject.sims.user.model.vo.PayCardVo">
		INSERT INTO payinfo_card (order_no, card_holder, card_ssn, card_relationship, card_number, card_expiration)
		VALUES (#{orderNo}, #{cardHolder}, #{cardSsn}, #{cardRelationship}, #{cardNumber}, #{cardExpiration})
	</insert>

	<insert id="insertPayinfoAcc" parameterType="kh.finalproject.sims.user.model.vo.PayAccVo">
		INSERT INTO payinfo_acc (order_no, acc_holder, acc_ssn, acc_relationship, acc_number, acc_bank)
		VALUES (#{orderNo}, #{accHolder}, #{accSsn}, #{accRelationship}, #{accNumber}, #{accBank})
	</insert>

	<!-- 요금제 정보 -->
	<select id="getPlanByNo" resultType="planVo">
		select p.plan_no
		    , p.plan_name
		    , p.biz_name
		    , p.net_no
		    , p.gen_no
		    , p.plan_price
		    , p.plan_voice
		    , p.plan_message
		    , p.plan_data
		    , p.plan_voice_over
		    , p.plan_message_over
		    , p.plan_data_over
		    , p.plan_date
		    , n.net_name
		    , g.gen_name
		    , b.biz_id
		from plan_table p
		    inner join network_table n
		    on (n.net_no = p.net_no)
		    inner join tel_gen_table g
		    on (g.gen_no = p.gen_no)
		    inner join biz b
		    on (b.biz_name = p.biz_name)
		where plan_no = #{planNo}
	</select>
	
	<!-- 찜 추가 -->
	<insert id="insertLike" parameterType="likeVo">
		insert into LIKE_TABLE(PLAN_NO, USER_ID, LIKE_DATE)
			values (#{planNo}, #{userId}, sysdate)
	</insert>
	
	<!-- 찜 삭제 -->
	<delete id="deleteLike">
		DELETE FROM LIKE_TABLE WHERE PLAN_NO = #{planNo} AND USER_ID = #{userId}
	</delete>
	
	<!-- 찜 확인 -->
	<select id="getLikeByPlanWithUser" resultType="likeVo">
		select * from like_table where plan_no = #{planNo} and user_id = #{userId}
	</select>

	<!-- 최근 본 요금제 -->
	<select id="selectRecentList" parameterType="string" resultType="planVo">
		select * from (
			select v.plan_no, plan_name, biz_name, net_no, gen_no, plan_price, plan_voice, plan_message
			    , plan_data, plan_voice_over, plan_message_over, plan_data_over, plan_date, plan_update_date
			    , (select b.biz_id from biz b where p.biz_name = b.biz_name) as biz_id
			    , (select b.biz_review_star from biz b where p.biz_name = b.biz_name) as biz_review_star
		        , (select count(*) from plan_order po where p.plan_no = po.plan_no and po.order_status=2) as order_count
			from view_table v, plan_table p
			where v.plan_no = p.plan_no and user_id=#{userId} and
			(view_date >= SYSTIMESTAMP - interval '24' hour)
			order by view_date desc)
        where <![CDATA[ rownum <= 7 ]]>
	</select>
	
	<!-- 최근 본 요금제 갯수 -->
	<select id="selectRecentListCount" parameterType="string" resultType="int">
		select count(*)
		from view_table v, plan_table p
		where v.plan_no = p.plan_no and user_id=#{userId} and
		(view_date >= SYSTIMESTAMP - interval '24' hour)
		order by view_date desc
	</select>
	
	<!-- 최근 본 요금제 유무 -->
	<select id="getRecentInfo" parameterType="hashmap" resultType="int">
		select count(*) from view_table where user_id=#{userId} and plan_no=#{planNo} 
	</select>
	
	<!-- 최근 본 요금제 수정 -->
	<update id="updateRecentInfo" parameterType="hashmap">
		update view_table set view_date=systimestamp where user_id=#{userId} and plan_no=#{planNo}
	</update>

	<!-- 최근 본 요금제 저장 -->
	<insert id="insertRecentInfo" parameterType="hashmap">
		insert into view_table values(#{userId}, #{planNo}, systimestamp)
	</insert>
	
	<!-- 찜한 요금제 -->
	<select id="selectLikeList" parameterType="string" resultType="planVo">
		select l.plan_no, plan_name, biz_name, net_no, gen_no, plan_price, plan_voice, plan_message
		    , plan_data, plan_voice_over, plan_message_over, plan_data_over, plan_date, plan_update_date
		    , (select b.biz_id from biz b where p.biz_name = b.biz_name) as biz_id
		from like_table l, plan_table p
		where l.plan_no = p.plan_no and user_id=#{userId}
		order by like_date desc
	</select>
	
	<!-- 찜한 요금제 갯수 -->
	<select id="selectLikeListCount" parameterType="string" resultType="int">
		select count(*)
		from like_table l, plan_table p
		where l.plan_no = p.plan_no and user_id=#{userId}
		order by like_date desc
	</select>
	
	<!-- 조회수 랭킹 -->
	<select id="selectViewRankList" resultType="planVo">
		select * from (
		    select plan_no, plan_name, biz_name, net_no, gen_no, plan_price, plan_voice, plan_message
		        , plan_data, plan_voice_over, plan_message_over, plan_data_over, plan_date, plan_update_date
		        , (select b.biz_id from biz b where p.biz_name = b.biz_name) as biz_id
		        , (select b.biz_review_star from biz b where p.biz_name = b.biz_name) as biz_review_star
		        , (select count(*) from plan_order po where p.plan_no = po.plan_no and po.order_status=2) as order_count
		        , (select count(*) from view_table vt where p.plan_no = vt.plan_no) as view_rank
		    from plan_table p
		    order by view_rank desc)
		where rownum <![CDATA[ <= ]]> 10
	</select>
	
	<!-- 찜 랭킹 -->
	<select id="selectLikeRankList" resultType="planVo">
		select * from (
			select plan_no, plan_name, biz_name, net_no, gen_no, plan_price, plan_voice, plan_message
			    , plan_data, plan_voice_over, plan_message_over, plan_data_over, plan_date, plan_update_date
			    , (select b.biz_id from biz b where p.biz_name = b.biz_name) as biz_id
			    , (select b.biz_review_star from biz b where p.biz_name = b.biz_name) as biz_review_star
			    , (select count(*) from plan_order po where p.plan_no = po.plan_no and po.order_status=2) as order_count
			    , (select count(*) from like_table lt where p.plan_no = lt.plan_no) as like_rank
			from plan_table p
			order by like_rank desc)
		where rownum <![CDATA[ <= ]]> 10
	</select>
	
	<!-- 가입자 수 랭킹 -->
	<select id="selectOrderRankList" resultType="planVo">
		select * from (
		    select plan_no, plan_name, biz_name, net_no, gen_no, plan_price, plan_voice, plan_message
		        , plan_data, plan_voice_over, plan_message_over, plan_data_over, plan_date, plan_update_date
		        , (select b.biz_id from biz b where p.biz_name = b.biz_name) as biz_id
		        , (select b.biz_review_star from biz b where p.biz_name = b.biz_name) as biz_review_star
		        , (select count(*) from plan_order po where p.plan_no = po.plan_no and po.order_status=2) as order_count
		    from plan_table p
		    order by order_count desc)
		where rownum <![CDATA[ <= ]]> 10
	</select>
	
	<!-- 통신사 별 요금제 -->
	<select id="selectBizPlanList" parameterType="string" resultType="planVo">
		select * from (
			select plan_no, plan_name, biz_name, net_no, gen_no, plan_price, plan_voice, plan_message
			    , plan_data, plan_voice_over, plan_message_over, plan_data_over, plan_date, plan_update_date
			    , (select b.biz_id from biz b where p.biz_name = b.biz_name) as biz_id
			    , (select b.biz_review_star from biz b where p.biz_name = b.biz_name) as biz_review_star
			    , (select count(*) from plan_order po where p.plan_no = po.plan_no and po.order_status=2) as order_count
			from plan_table p
			where (select b.biz_id from biz b where p.biz_name = b.biz_name) = #{bizId} )
		where rownum <![CDATA[ <= ]]> 5
	</select>
	
</mapper>